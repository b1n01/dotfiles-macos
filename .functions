#!/bin/sh
# Custom functions here

# Check if in a git directory
_is-git-directory () { 
	if [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" = "true" ]; then
    	return 0
    else
		echo You are not in a git directory
        return 1
    fi
}

# Check if the are any parameters
_has-params () {
	if [ -n "$1" ]; then
    	return 0
    else
		echo Missing parameter/s
        return 1
    fi
}

#@doc list: List aliases and functions
list () {
    printf "Here your commands: ðŸ¤˜ðŸ¤˜ðŸ¤˜\n\n"
    grep -oh '^#@doc.\+' \
        ~/.dotfiles/.alias \
        ~/.dotfiles/.functions |      # match doc tags
        cut -c 7- |                   # remove the '#@doc ' part
        sort |                        # sort the result
        grep '^[^:]\+' --color=always # color the alias name

}

#@doc gg [branch]: "Smart" checkout a git branch by searchig it
gg () {
	_is-git-directory || return
	_has-params $@ || return

	# --format is to keep only branch name
	# --all to get local and remote branch
	branches=$(git branch --all --format='%(refname:short)')

	# --max-count is to keep only first match
	branch=$(echo $branches | grep $1 --max-count 1)

	# Ensure to checkout the local branch
	[[ $branch == origin/* ]] && branch=$(echo $branch | cut -c 8-)
	
	if ! git show-ref --verify --quiet refs/heads/$branch; then
		echo No branch matching "'$1'" found locally; return;
	fi

	git checkout $branch
}

#@doc gpush-up: Git push current branch and set upstream
gpush-up () {
	_is-git-directory && git push --set-upstream origin $(git branch --show-current)
}

#@doc gdel [branch]: Delete a git branch
gdel () {
	_has-params $@ || return

	remote=$(git branch --list $1 --format='%(upstream:short)')
	if [ $remote ]; then
		printf "This branch is tracking the remote '$remote', do you want to delete both of them? [y/n] "
		read choice
		if [[ "$choice" =~ ^[Yy]$ ]]; then
			git branch -d $1
			git push origin --delete $1
		fi
	else
		git branch -d $1
	fi
}


#@doc gu "name" "email": Set git user
gu () {
	_is-git-directory || return
	_has-params $@ || return
	
    git config user.name $1
	git config user.email $2

    echo "User '$(git config user.name)' ($(git config user.email)) set on ${PWD}"
}
